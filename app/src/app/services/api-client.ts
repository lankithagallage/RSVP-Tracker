//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
} from '@angular/common/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class Client {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @param page (optional)
   * @param size (optional)
   * @param search (optional)
   * @param sort (optional)
   * @param order (optional)
   * @return Success
   */
  search(
    page: number | undefined,
    size: number | undefined,
    search: string | undefined,
    sort: string | undefined,
    order: string | undefined
  ): Observable<EventDtoListPagedResultResult> {
    let url_ = this.baseUrl + '/api/v1/events/search?';
    if (page === null) throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += 'page=' + encodeURIComponent('' + page) + '&';
    if (size === null) throw new Error("The parameter 'size' cannot be null.");
    else if (size !== undefined)
      url_ += 'size=' + encodeURIComponent('' + size) + '&';
    if (search === null)
      throw new Error("The parameter 'search' cannot be null.");
    else if (search !== undefined)
      url_ += 'search=' + encodeURIComponent('' + search) + '&';
    if (sort === null) throw new Error("The parameter 'sort' cannot be null.");
    else if (sort !== undefined)
      url_ += 'sort=' + encodeURIComponent('' + sort) + '&';
    if (order === null)
      throw new Error("The parameter 'order' cannot be null.");
    else if (order !== undefined)
      url_ += 'order=' + encodeURIComponent('' + order) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processSearch(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processSearch(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<EventDtoListPagedResultResult>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<EventDtoListPagedResultResult>;
        })
      );
  }

  protected processSearch(
    response: HttpResponseBase
  ): Observable<EventDtoListPagedResultResult> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = EventDtoListPagedResultResult.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = EventDtoListPagedResultResult.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'Server Error',
            status,
            _responseText,
            _headers
          );
        })
      );
    } else if (status === 403) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result403: any = null;
          let resultData403 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result403 = ProblemDetails.fromJS(resultData403);
          return throwException(
            'Forbidden',
            status,
            _responseText,
            _headers,
            result403
          );
        })
      );
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result401: any = null;
          let resultData401 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result401 = ProblemDetails.fromJS(resultData401);
          return throwException(
            'Unauthorized',
            status,
            _responseText,
            _headers,
            result401
          );
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status === 409) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result409: any = null;
          let resultData409 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result409 = ProblemDetails.fromJS(resultData409);
          return throwException(
            'Conflict',
            status,
            _responseText,
            _headers,
            result409
          );
        })
      );
    } else if (status === 503) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result503: any = null;
          let resultData503 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result503 = ProblemDetails.fromJS(resultData503);
          return throwException(
            'Server Error',
            status,
            _responseText,
            _headers,
            result503
          );
        })
      );
    } else if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException('No Content', status, _responseText, _headers);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<EventDtoListPagedResultResult>(null as any);
  }

  /**
   * @param api_version (optional)
   * @return Success
   */
  health(api_version: string | undefined): Observable<string> {
    let url_ = this.baseUrl + '/api/Health?';
    if (api_version === null)
      throw new Error("The parameter 'api_version' cannot be null.");
    else if (api_version !== undefined)
      url_ += 'api-version=' + encodeURIComponent('' + api_version) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processHealth(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processHealth(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<string>;
            }
          } else
            return _observableThrow(response_) as any as Observable<string>;
        })
      );
  }

  protected processHealth(response: HttpResponseBase): Observable<string> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = resultData200 !== undefined ? resultData200 : <any>null;

          return _observableOf(result200);
        })
      );
    } else if (status === 500) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'Server Error',
            status,
            _responseText,
            _headers
          );
        })
      );
    } else if (status === 403) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result403: any = null;
          let resultData403 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result403 = ProblemDetails.fromJS(resultData403);
          return throwException(
            'Forbidden',
            status,
            _responseText,
            _headers,
            result403
          );
        })
      );
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result401: any = null;
          let resultData401 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result401 = ProblemDetails.fromJS(resultData401);
          return throwException(
            'Unauthorized',
            status,
            _responseText,
            _headers,
            result401
          );
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status === 409) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result409: any = null;
          let resultData409 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result409 = ProblemDetails.fromJS(resultData409);
          return throwException(
            'Conflict',
            status,
            _responseText,
            _headers,
            result409
          );
        })
      );
    } else if (status === 503) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result503: any = null;
          let resultData503 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result503 = ProblemDetails.fromJS(resultData503);
          return throwException(
            'Server Error',
            status,
            _responseText,
            _headers,
            result503
          );
        })
      );
    } else if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException('No Content', status, _responseText, _headers);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<string>(null as any);
  }
}

export class EventDto implements IEventDto {
  id?: string;
  title?: string;
  description?: string;
  location?: string;
  startTime?: Date;
  endTime?: Date;
  isExpired?: boolean;
  organizerName?: string;

  constructor(data?: IEventDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.title = _data['title'];
      this.description = _data['description'];
      this.location = _data['location'];
      this.startTime = _data['startTime']
        ? new Date(_data['startTime'].toString())
        : <any>undefined;
      this.endTime = _data['endTime']
        ? new Date(_data['endTime'].toString())
        : <any>undefined;
      this.isExpired = _data['isExpired'];
      this.organizerName = _data['organizerName'];
    }
  }

  static fromJS(data: any): EventDto {
    data = typeof data === 'object' ? data : {};
    let result = new EventDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['title'] = this.title;
    data['description'] = this.description;
    data['location'] = this.location;
    data['startTime'] = this.startTime
      ? this.startTime.toISOString()
      : <any>undefined;
    data['endTime'] = this.endTime
      ? this.endTime.toISOString()
      : <any>undefined;
    data['isExpired'] = this.isExpired;
    data['organizerName'] = this.organizerName;
    return data;
  }
}

export interface IEventDto {
  id?: string;
  title?: string;
  description?: string;
  location?: string;
  startTime?: Date;
  endTime?: Date;
  isExpired?: boolean;
  organizerName?: string;
}

export class EventDtoListPagedResult implements IEventDtoListPagedResult {
  value?: EventDto[] | undefined;
  readonly status?: ResultStatus;
  readonly isSuccess?: boolean;
  readonly successMessage?: string | undefined;
  readonly correlationId?: string | undefined;
  readonly location?: string | undefined;
  readonly errors?: string[] | undefined;
  readonly validationErrors?: ValidationError[] | undefined;
  pagedInfo?: PagedInfo | undefined;

  constructor(data?: IEventDtoListPagedResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value'])
          this.value!.push(EventDto.fromJS(item));
      }
      (<any>this).status = _data['status'];
      (<any>this).isSuccess = _data['isSuccess'];
      (<any>this).successMessage = _data['successMessage'];
      (<any>this).correlationId = _data['correlationId'];
      (<any>this).location = _data['location'];
      if (Array.isArray(_data['errors'])) {
        (<any>this).errors = [] as any;
        for (let item of _data['errors']) (<any>this).errors!.push(item);
      }
      if (Array.isArray(_data['validationErrors'])) {
        (<any>this).validationErrors = [] as any;
        for (let item of _data['validationErrors'])
          (<any>this).validationErrors!.push(ValidationError.fromJS(item));
      }
      this.pagedInfo = _data['pagedInfo']
        ? PagedInfo.fromJS(_data['pagedInfo'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): EventDtoListPagedResult {
    data = typeof data === 'object' ? data : {};
    let result = new EventDtoListPagedResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item.toJSON());
    }
    data['status'] = this.status;
    data['isSuccess'] = this.isSuccess;
    data['successMessage'] = this.successMessage;
    data['correlationId'] = this.correlationId;
    data['location'] = this.location;
    if (Array.isArray(this.errors)) {
      data['errors'] = [];
      for (let item of this.errors) data['errors'].push(item);
    }
    if (Array.isArray(this.validationErrors)) {
      data['validationErrors'] = [];
      for (let item of this.validationErrors)
        data['validationErrors'].push(item.toJSON());
    }
    data['pagedInfo'] = this.pagedInfo
      ? this.pagedInfo.toJSON()
      : <any>undefined;
    return data;
  }
}

export interface IEventDtoListPagedResult {
  value?: EventDto[] | undefined;
  status?: ResultStatus;
  isSuccess?: boolean;
  successMessage?: string | undefined;
  correlationId?: string | undefined;
  location?: string | undefined;
  errors?: string[] | undefined;
  validationErrors?: ValidationError[] | undefined;
  pagedInfo?: PagedInfo | undefined;
}

export class EventDtoListPagedResultResult
  implements IEventDtoListPagedResultResult
{
  value?: EventDtoListPagedResult | undefined;
  readonly status?: ResultStatus;
  readonly isSuccess?: boolean;
  readonly successMessage?: string | undefined;
  readonly correlationId?: string | undefined;
  readonly location?: string | undefined;
  readonly errors?: string[] | undefined;
  readonly validationErrors?: ValidationError[] | undefined;

  constructor(data?: IEventDtoListPagedResultResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.value = _data['value']
        ? EventDtoListPagedResult.fromJS(_data['value'])
        : <any>undefined;
      (<any>this).status = _data['status'];
      (<any>this).isSuccess = _data['isSuccess'];
      (<any>this).successMessage = _data['successMessage'];
      (<any>this).correlationId = _data['correlationId'];
      (<any>this).location = _data['location'];
      if (Array.isArray(_data['errors'])) {
        (<any>this).errors = [] as any;
        for (let item of _data['errors']) (<any>this).errors!.push(item);
      }
      if (Array.isArray(_data['validationErrors'])) {
        (<any>this).validationErrors = [] as any;
        for (let item of _data['validationErrors'])
          (<any>this).validationErrors!.push(ValidationError.fromJS(item));
      }
    }
  }

  static fromJS(data: any): EventDtoListPagedResultResult {
    data = typeof data === 'object' ? data : {};
    let result = new EventDtoListPagedResultResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value ? this.value.toJSON() : <any>undefined;
    data['status'] = this.status;
    data['isSuccess'] = this.isSuccess;
    data['successMessage'] = this.successMessage;
    data['correlationId'] = this.correlationId;
    data['location'] = this.location;
    if (Array.isArray(this.errors)) {
      data['errors'] = [];
      for (let item of this.errors) data['errors'].push(item);
    }
    if (Array.isArray(this.validationErrors)) {
      data['validationErrors'] = [];
      for (let item of this.validationErrors)
        data['validationErrors'].push(item.toJSON());
    }
    return data;
  }
}

export interface IEventDtoListPagedResultResult {
  value?: EventDtoListPagedResult | undefined;
  status?: ResultStatus;
  isSuccess?: boolean;
  successMessage?: string | undefined;
  correlationId?: string | undefined;
  location?: string | undefined;
  errors?: string[] | undefined;
  validationErrors?: ValidationError[] | undefined;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property)) this[property] = _data[property];
      }
      this.type = _data['type'];
      this.title = _data['title'];
      this.status = _data['status'];
      this.detail = _data['detail'];
      this.instance = _data['instance'];
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === 'object' ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property)) data[property] = this[property];
    }
    data['type'] = this.type;
    data['title'] = this.title;
    data['status'] = this.status;
    data['detail'] = this.detail;
    data['instance'] = this.instance;
    return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;
}

export class HttpValidationProblemDetails
  extends ProblemDetails
  implements IHttpValidationProblemDetails
{
  errors?: { [key: string]: string[] };

  [key: string]: any;

  constructor(data?: IHttpValidationProblemDetails) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property)) this[property] = _data[property];
      }
      if (_data['errors']) {
        this.errors = {} as any;
        for (let key in _data['errors']) {
          if (_data['errors'].hasOwnProperty(key))
            (<any>this.errors)![key] =
              _data['errors'][key] !== undefined ? _data['errors'][key] : [];
        }
      }
    }
  }

  static fromJS(data: any): HttpValidationProblemDetails {
    data = typeof data === 'object' ? data : {};
    let result = new HttpValidationProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property)) data[property] = this[property];
    }
    if (this.errors) {
      data['errors'] = {};
      for (let key in this.errors) {
        if (this.errors.hasOwnProperty(key))
          (<any>data['errors'])[key] = (<any>this.errors)[key];
      }
    }
    super.toJSON(data);
    return data;
  }
}

export interface IHttpValidationProblemDetails extends IProblemDetails {
  errors?: { [key: string]: string[] };

  [key: string]: any;
}

export class PagedInfo implements IPagedInfo {
  pageNumber?: number;
  pageSize?: number;
  totalPages?: number;
  totalRecords?: number;

  constructor(data?: IPagedInfo) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pageNumber = _data['pageNumber'];
      this.pageSize = _data['pageSize'];
      this.totalPages = _data['totalPages'];
      this.totalRecords = _data['totalRecords'];
    }
  }

  static fromJS(data: any): PagedInfo {
    data = typeof data === 'object' ? data : {};
    let result = new PagedInfo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['pageNumber'] = this.pageNumber;
    data['pageSize'] = this.pageSize;
    data['totalPages'] = this.totalPages;
    data['totalRecords'] = this.totalRecords;
    return data;
  }
}

export interface IPagedInfo {
  pageNumber?: number;
  pageSize?: number;
  totalPages?: number;
  totalRecords?: number;
}

export enum ResultStatus {
  _0 = 0,
  _1 = 1,
  _2 = 2,
  _3 = 3,
  _4 = 4,
  _5 = 5,
  _6 = 6,
  _7 = 7,
  _8 = 8,
  _9 = 9,
  _10 = 10,
}

export class ValidationError implements IValidationError {
  identifier?: string | undefined;
  errorMessage?: string | undefined;
  errorCode?: string | undefined;
  severity?: ValidationSeverity;

  constructor(data?: IValidationError) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.identifier = _data['identifier'];
      this.errorMessage = _data['errorMessage'];
      this.errorCode = _data['errorCode'];
      this.severity = _data['severity'];
    }
  }

  static fromJS(data: any): ValidationError {
    data = typeof data === 'object' ? data : {};
    let result = new ValidationError();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['identifier'] = this.identifier;
    data['errorMessage'] = this.errorMessage;
    data['errorCode'] = this.errorCode;
    data['severity'] = this.severity;
    return data;
  }
}

export interface IValidationError {
  identifier?: string | undefined;
  errorMessage?: string | undefined;
  errorCode?: string | undefined;
  severity?: ValidationSeverity;
}

export enum ValidationSeverity {
  _0 = 0,
  _1 = 1,
  _2 = 2,
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else
    return _observableThrow(
      new ApiException(message, status, response, headers, null)
    );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
